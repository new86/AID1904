面向对象
面向对象是软件开发方法。

面向对象的三个基本特征是：封装、继承、多态。

三大特点
------------------------------------------------------------------------------------------------------------
1.封装
什么是封装：
封装是把具体的事物抽象化的过程.将有一定功能的代码封装起来，使用时调用即可
将事物相关的属性和方法封装在一个类里面，我们调用类创建实例的时候，不用关心类内部的代码细节

封装的意义：
封装可以隐藏实现细节，使得代码模块化；在面向对象编程上可理解为：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。
封装可以保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。

保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==>数据封装 。

方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==> 方法封装。

简单点说：
1.封装是面向对象编程的一大特点
2.面向对象编程的第一步，将属性和方法封装到一个抽象的类中
3.外界使用类创建对象，然后让对象调用方法
4.对象方法的细节都被封装在类的内部

封装的好处:隐藏类的实现细节;让使用者只能通过规定的方法来访问数据;可以方便的加入存取控制语句,限制不合理操作。
------------------------------------------------------------------------------------------------------------
2.继承


继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。
通过继承创建的新类称为“子类”或“派生类”。被继承的类称为“基类”、“父类”或“超类”。


简单来说：子类拥有父类的所有属性和方法
将公共的属性和方法放在父类中，自己自考虑特有的属性和方法。



a.重写父类和扩展
重写父类方法(覆盖父类的方法) ：如果子类中，重写了父类的方法 ，在运行中，只会调用在子类中重写的方法而不会调用父类的方法

b.多继承
子类拥有一个父类叫作单继承 
子类可以拥有多个父类，并且具有所有父类的属性和方法叫做多继承
例如:孩子会继承自己父亲和母亲的特征


c.继承的实现方式

实现继承、接口继承

实现继承是指使用基类的属性和方法而无需额外编码的能力；

接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；
------------------------------------------------------------------------------------------------------------
3.多态(以封装和继承为前提) 
不同对象调用同一个方法，功能的表现形式不一样,也可以说是：“一个接口，多种方法”，同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。
程序运行过程中，根据执行条件的不同，动态执行不同的操作代码的过程称为运行时多态。



首先：继承的存在(继承是多态的基础,没有继承就没有多态).

其次：子类重写父类的方法(多态下调用子类重写的方法).

再次：多态可以增加代码的灵活度 
-----------------------------------------------------------------------------------------------------------




六大原则
------------------------------------------------------------------------------------------------------------
1.类的单一职责
单一职责原则的定义是就一个类而言，应该仅有一个引起他变化的原因。也就是说一个类应该只负责一件事情。
为什么要单一，举个例子：
如果一个类负责了方法A,方法B两个不同的事情，当A方法发生变化的时候，我们需要修改这个类的A方法，但是这个时候就有可能导致B方法不能工作。这个不是我们期待的，但是由于这种设计却很有可能发生。所以这个时候，我们需要把A方法和B方法单独分离成两个类。让每个类只专心处理自己的方法。
单一职责原则的好处：
可以降低类的复杂度，一个类只负责一项职责，这样逻辑也简单很多
提高类的可读性，和系统的维护性，因为不会有其他奇怪的方法来干扰我们理解这个类的含义
当发生变化的时候，能将变化的影响降到最小，因为只会在这个类中做出修改。
------------------------------------------------------------------------------------------------------------
2.开闭原则
开闭原则和单一职责原则一样，是非常基础而且一般是常识的原则。开闭原则的定义是类、模块、函数等，应该对于扩展是开放的，但是对于修改是关闭的。
当需求发生改变的时候，我们需要对代码进行修改，这个时候我们应该尽量去扩展原来的代码，而不是去修改原来的代码，因为这样可能会引起更多的问题。
------------------------------------------------------------------------------------------------------------
3.依赖倒置（依赖抽象）
依赖倒置原则指的是一种特殊的解耦方式，使得高层次的模块不应该依赖于低层次的模块。
------------------------------------------------------------------------------------------------------------
4.组合复用原则
组合复用原则来源：

       在面向对象的设计中，如果直接继承基类，会破坏封装，因为继承将基类的实现细节暴露给子类；如果基类的实现发生改变，则子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性。于是就提出了组合复用原则，也就是在实际开发设计中，尽量使用组合，不要使用类继承。即在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新对象通过向这些对象的委派达到复用已有功能的目的。就是说要尽量的使用组合，而不是继承关系达到复用的目的。

该原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分：新的对象通过向这些对象的委派达到复用已有功能的目的。

组合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。
------------------------------------------------------------------------------------------------------------
5.里氏替换

所有引用基类的地方必须能够透明地使用其子类的对象。
通俗的去讲就是：子类可以去扩展父类的功能，但是不能改变父类原有的功能。他包含以下几层意思：

子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。
子类可以增加自己独有的方法。
当子类的方法重载父类的方法时候，方法的形参要比父类的方法的输入参数更加宽松。
当子类的方法实现父类的抽象方法时，方法的返回值要比父类更严格。
里氏替换原则之所以这样要求是因为继承有很多缺点，他虽然是复用代码的一种方法，但同时继承在一定程度上违反了封装。父类的属性和方法对子类都是透明的，子类可以随意修改父类的成员。这也导致了，如果需求变更，子类对父类的方法进行一些复写的时候，其他的子类无法正常工作。所以里氏替换法则被提出来。
确保程序遵循里氏替换原则可以要求我们的程序建立抽象，通过抽象去建立规范，然后用实现去扩展细节，这样，里氏替换原则和开闭原则往往是相互依存的。
------------------------------------------------------------------------------------------------------------
6.迪米特法则
迪米特原则也被称为最小知识原则，一个对象应该对其他对象保持最小的了解。

因为类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大，所以这也是我们提倡的编程的总的原则：低耦合，高内聚。

