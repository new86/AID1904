面向对象
面向对象是软件开发方法。
面向对象(Object Oriented,OO),面向对象的分析（OOA，Object Oriented Analysis），面向对象的设计（OOD，Object Oriented Design）、以及我们经常说的面向对象的编程实现（OOP，Object Oriented Programming）
面向对象的三个基本特征是：封装、继承、多态。

对象：万物皆对象 
类：类就是具有相同的属性和功能的对象的抽象的集合 
实例：对象就是类的实例

三大特点
------------------------------------------------------------------------------------------------------------
1.封装
什么是封装？
封装是把具体的事物抽象化的过程.将有一定功能的代码封装起来，使用时调用即可
将事物相关的属性和方法封装在一个类里面，我们调用类创建实例的时候，不用关心类内部的代码细节

封装的意义
封装可以隐藏实现细节，使得代码模块化；在面向对象编程上可理解为：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。
封装可以保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。

保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==>数据封装 。

方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==> 方法封装。

当对象含有完整的属性和与之对应的方法时称为封装。

从对象外面不能直接访问对象的属性，只能通过和该属性对应的方法访问。

对象的方法可以接收对象外面的消息。



1.封装是面向对象编程的一大特点
2.面向对象编程的第一步，将属性和方法封装到一个抽象的类中
3.外界使用类创建对象，然后让对象调用方法
4.对象方法的细节都被封装在类的内部

 封装的好处:隐藏类的实现细节;让使用者只能通过程序员规定的方法来访问数据;可以方便的加入存取控制语句,限制不合理操作.








------------------------------------------------------------------------------------------------------------
2.继承
子类需要复用父类里面的属性或者方法,当然子类也可以提供自己的属性和方法
将公共的属性和方法放在父类中，自己自考虑特有的属性和方法。
实现代码的重用，相同的代码不需要重复的写

1 单继承
继承的概念：子类拥有父类的所有属性和方法(子类只需要封装自己特有的方法)

2 继承的传递性


3 重写父类和扩展
覆盖父类的方法(重写父类方法) 
如果子类中，重写了父类的方法 
在运行中，只会调用在子类中重写的方法而不会调用父类的方法

4 多继承
子类拥有一个父类叫作单继承 
子类可以拥有多个父类，并且具有所有父类的属性和方法 
例如:孩子会继承自己父亲和母亲的特征



什么是继承？

继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。其继承的过程，就是从一般到特殊的过程。

通过继承创建的新类称为“子类”或“派生类”。被继承的类称为“基类”、“父类”或“超类”。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。

继承的实现方式？

继承概念的实现方式有三类：实现继承、接口继承和可视继承。

实现继承是指使用基类的属性和方法而无需额外编码的能力；

接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；

可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。




------------------------------------------------------------------------------------------------------------
3.多态
同一个方法不同对象调用同一个方法功能的表现形式不一样
程序运行过程中，根据执行条件的不同，动态执行不同的操作代码的过程称为运行时多态。
多态(以封装和继承为前提) 
面向对象的三大特征： 
1.封装:根据职责将属性和方法封装到一个抽象的类中 
2.继承:实现代码的重用，相同的代码不需要重复的编写 
子类针对自己特有的需求，编写特定的代码 
3.多态：不同的子类对象调用相同的方法，产生不同的执行结果 
1.多态可以增加代码的灵活度 
2.以继承和重写父类的方法为前提 
3.调用方法，不会影响到类的内部设计


 多态的三个条件:

1.    继承的存在(继承是多态的基础,没有继承就没有多态).

2.    子类重写父类的方法(多态下调用子类重写的方法).

3.    父类引用变量指向子类对象(子类到父类的类型转换).

    子类转换成父类时的规则:

      将一个父类的引用指向一个子类的对象,称为向上转型(upcastiog),自动进行类型转换.

      此时通过父类引用调用的方法是子类覆盖或继承父类的方法,不是父类的方法.

      此时通过父类引用变量无法调用子类特有的方法.

如果父类要调用子类的特有方法就得将一个指向子类对象的父类引用赋给一个子类的引用,称为向下转型,此时必须进行强制类型转换.


什么是多态？

“一个接口，多种方法”，同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。

多态的三个条件？

a. 继承的存在(继承是多态的基础,没有继承就没有多态). 
b. 子类重写父类的方法(多态下调用子类重写的方法). 
c. 父类引用变量指向子类对象(子类到父类的类型转换).

重载（overload）和重写（override）是实现多态的两种主要方式。

实现多态？

接口多态性 
继承多态性 
通过抽象类实现的多态性






六大原则
------------------------------------------------------------------------------------------------------------
1.开闭原则
开闭原则和单一职责原则一样，是非常基础而且一般是常识的原则。开闭原则的定义是软件中的对象(类，模块，函数等)应该对于扩展是开放的，但是对于修改是关闭的。
当需求发生改变的时候，我们需要对代码进行修改，这个时候我们应该尽量去扩展原来的代码，而不是去修改原来的代码，因为这样可能会引起更多的问题。
这个准则和单一职责原则一样，是一个大家都这样去认为但是又没规定具体该如何去做的一种原则。
开闭原则我们可以用一种方式来确保他，我们用抽象去构建框架，用实现扩展细节。这样当发生修改的时候，我们就直接用抽象了派生一个具体类去实现修改。

------------------------------------------------------------------------------------------------------------
2.类的单一职责
单一职责原则的定义是就一个类而言，应该仅有一个引起他变化的原因。也就是说一个类应该只负责一件事情。如果一个类负责了方法M1,方法M2两个不同的事情，当M1方法发生变化的时候，我们需要修改这个类的M1方法，但是这个时候就有可能导致M2方法不能工作。这个不是我们期待的，但是由于这种设计却很有可能发生。所以这个时候，我们需要把M1方法，M2方法单独分离成两个类。让每个类只专心处理自己的方法。
单一职责原则的好处如下：

可以降低类的复杂度，一个类只负责一项职责，这样逻辑也简单很多
提高类的可读性，和系统的维护性，因为不会有其他奇怪的方法来干扰我们理解这个类的含义
当发生变化的时候，能将变化的影响降到最小，因为只会在这个类中做出修改。
------------------------------------------------------------------------------------------------------------
3.依赖倒置（依赖抽象）
依赖倒置原则指的是一种特殊的解耦方式，使得高层次的模块不应该依赖于低层次的模块的实现细节的目的，依赖模块被颠倒了。
这也是一个让人难懂的定义，他可以简单来说就是

高层模块不应该依赖底层模块，两者都应该依赖其抽象
抽象不应该依赖细节
细节应该依赖抽象
------------------------------------------------------------------------------------------------------------
4.组合复用原则
组合/聚合复用原则来源：

       在面向对象的设计中，如果直接继承基类，会破坏封装，因为继承将基类的实现细节暴露给子类；如果基类的实现发生改变，则子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性。于是就提出了组合/聚合复用原则，也就是在实际开发设计中，尽量使用合成/聚合，不要使用类继承。即在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新对象通过向这些对象的委派达到复用已有功能的目的。就是说要尽量的使用合成和聚合，而不是继承关系达到复用的目的。

组合/聚合复用原则定义：

        合成/聚合复用原则经常又叫做合成复用原则。该原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分：新的对象通过向这些对象的委派达到复用已有功能的目的。

组合/聚合复用原则作用：

        组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。 由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。

组合/聚合复用原则示例：

        合成（Composition，也有翻译成组合）和聚合（Aggregation），都是关联的特殊种类。聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成（组合）是一种强的“拥有”关系，体现了严格的部分与整体的关系，部分和整体的生命周期是一样的。聚合/组合UML示意图如图1所示：

                        


       在我们的日常开发中，经常遇到新的数据库或股市行情源替换问题，如下面的情况。产品初始开发采用A公司的行情源，与行情源操作有关的类如CustomerData类等都需要连接行情源，连接行情源的方法getConnection()封装在DataUtil类中，由于需要重用DataUtil类的getConnection()方法，设计人员将CustomerData作为DataUtil类的子类，初始设计方案结构如图2所示：

                                                   


         随着产品的正式上线，需要更加稳定快速的行情源，于是决定使用B公司行情源，但是B公司行情源数据解析模式和A公司不一样。因此需要增加一个新的DataUtilB类来连接B行情源，由于在初始设计方案中CustomerData和DataUtil之间是继承关系，因此在更换行情连接方式时需要修改CustomerData类的源代码，将CustomerData作为DataUtilB的子类，这将违反开闭原则。当然也可以修改DataUtil类的源代码，同样会违反开闭原则。

         现使用合成复用原则对其进行重构。重构后的方案如图3所示：

                                     

        重构后的CustomerData和DataUtil之间的关系由继承关系变为关联关系，采用依赖注入的方式将DataUtil对象注入到CustomerData中，可以使用构造注入，也可以使用Setter注入。如果需要对DataUtil的功能进行扩展，可以通过其子类来实现，如通过子类DataUtilB来连接B行情源。由于CustomerData针对DataUtil编程，根据里氏代换原则，DataUtil子类的对象可以覆盖DataUtil对象，只需在CustomerData中注入子类对象即可使用子类所扩展的方法。例如在CustomerData中注入DataUtilB对象，即可实现接入B行情源，原有代码不需要修改，且还可以很方便地增加新的行情接入。

合成/聚合复用优缺点和继承复用优缺点总结：
合成/聚合复用：

(1).优点：
        新对象存取成分对象的唯一方法是通过成分对象的接口； 这种复用是黑箱复用，因为成分对象的内部细节是新对象所看不见的；这种复用支持包装；这种复用所需的依赖较少； 每一个新的类可以将焦点集中在一个任务上； 这种复用可以在运行时动态进行，新对象可以使用合成/聚合关系将新的责任委派到合适的对象。
(2).缺点：
         通过这种方式复用建造的系统会有较多的对象需要管理。

继承复用:
(1).优点：
        新的实现较为容易，因为基类的大部分功能可以通过继承关系自动进入派生类；修改或扩展继承而来的实现较为容易。
(2).缺点：
        继承复用破坏包装，因为继承将基类的实现细节暴露给派生类，这种复用也称为白箱复用； 如果基类的实现发生改变，那么派生类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，不够灵活。

组合/聚合复用原则使用总结：

        合成和聚合均是关联的特殊情况。聚合用来表示“拥有”关系或者整体与部分的关系；而合成则用来表示一种强得多的“拥有”关系。在一个合成关系里面，部分和整体的生命周期是一样的。一个合成的新的对象完全拥有对其组成部分的支配权，包括它们的创建和销毁等。使用程序语言的术语来说，组合而成的新对象对组成部分的内存分配、内存释放有绝对的责任。要正确的选择合成/复用和继承，必须透彻地理解里氏替换原则和Coad法则。（Coad法则由Peter Coad提出，总结了一些什么时候使用继承作为复用工具的条件。Coad法则：只有当以下Coad条件全部被满足时，才应当使用继承关系）

(1).子类是基类的一个特殊种类，而不是基类的一个角色。区分“Has-A”和“Is-A”。只有“Is-A”关系才符合继承关系，“Has-A”关系应当用聚合来描述。 

(2).永远不会出现需要将子类换成另外一个类的子类的情况。如果不能肯定将来是否会变成另外一个子类的话，就不要使用继承。 

(3).子类具有扩展基类的责任，而不是具有置换掉（override）或注销掉（Nullify）基类的责任。如果一个子类需要大量的置换掉基类的行为，那么这个类就不应该是这个基类的子类。 

(4).只有在分类学角度上有意义时，才可以使用继承。不要从工具类继承。

------------------------------------------------------------------------------------------------------------
5.里氏替换
里氏替换原则是一个非常有用的一个概念。他的定义

如果对每一个类型为T1的对象o1,都有类型为T2的对象o2,使得以T1定义的所有程序P在所有对象o1都替换成o2的时候，程序P的行为都没有发生变化，那么类型T2是类型T1的子类型。

这样说有点复杂，其实有一个简单的定义

所有引用基类的地方必须能够透明地使用其子类的对象。

里氏替换原则通俗的去讲就是：子类可以去扩展父类的功能，但是不能改变父类原有的功能。他包含以下几层意思：

子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。
子类可以增加自己独有的方法。
当子类的方法重载父类的方法时候，方法的形参要比父类的方法的输入参数更加宽松。
当子类的方法实现父类的抽象方法时，方法的返回值要比父类更严格。
里氏替换原则之所以这样要求是因为继承有很多缺点，他虽然是复用代码的一种方法，但同时继承在一定程度上违反了封装。父类的属性和方法对子类都是透明的，子类可以随意修改父类的成员。这也导致了，如果需求变更，子类对父类的方法进行一些复写的时候，其他的子类无法正常工作。所以里氏替换法则被提出来。
确保程序遵循里氏替换原则可以要求我们的程序建立抽象，通过抽象去建立规范，然后用实现去扩展细节，这个是不是很耳熟，对，里氏替换原则和开闭原则往往是相互依存的。
------------------------------------------------------------------------------------------------------------
6.迪米特法则
迪米特原则也被称为最小知识原则，他的定义

一个对象应该对其他对象保持最小的了解。

因为类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大，所以这也是我们提倡的软件编程的总的原则：低耦合，高内聚。
迪米特法则还有一个更简单的定义

只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。

这里我们可以用一个现实生活中的例子来讲解一下。比如我们需要一张CD,我们可能去音像店去问老板有没有我们需要的那张CD，老板说现在没有，等有的时候你们来拿就行了。在这里我们不需要关心老板是从哪里，怎么获得的那张CD，我们只和老板（直接朋友）沟通，至于老板从他的朋友那里通过何种条件得到的CD，我们不关心，我们不和老板的朋友（陌生人）进行通信，这个就是迪米特的一个应用。说白了，就是一种中介的方式。我们通过老板这个中介来和真正提供CD的人发生联系。
